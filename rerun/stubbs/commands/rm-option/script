#!/usr/bin/env bash
#
#/ command: stubbs:rm-option: "remove a command option"
#/ usage: stubbs:rm-option --command|-c <> --module|-m <> --option|-o <>

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions and those defined for stubbs.

. $RERUN_MODULE_DIR/lib/functions.sh rm-option || { 
    echo >&2 "failed laoding function library" ; exit 1 ; 
}


# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: stubbs:rm-option. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail


# Get the options
while [ "$#" -gt 0 ]; do
    OPT="$1"
    case "$OPT" in
	# options with arguments
	-o|--option)
	    rerun_option_check "$#" "$1"
	    OPTION="$2"
	    shift
	    ;;
	-c|--command)
	    rerun_option_check "$#" "$1"
		# Parse if command is named "module:command"
	 	regex='([^:]+)(:)([^:]+)'
		if [[ $2 =~ $regex ]]
		then
			MODULE=${BASH_REMATCH[1]}
			COMMAND=${BASH_REMATCH[3]}
		else
	    	COMMAND="$2"		
	    fi
	    shift
	    ;;
	-m|--module)
	    rerun_option_check "$#" "$1"
	    MODULE="$2"
	    shift
	    ;;
        # unknown option
	-?)
	    rerun_option_usage
        exit 2
	    ;;
	  # end of options, just arguments left
	*)
	    break
    esac
    shift
done

# Post process the options

[ -z "${MODULE:-}" ] && {
    echo "Module: "
    select MODULE in $(rerun_modules $RERUN_MODULES);
    do
	echo "You picked module $MODULE ($REPLY)"
	break
    done
}

[ -z "${COMMAND:-}" ] && {
    echo "Command: "
    select COMMAND in $(rerun_commands $RERUN_MODULES $MODULE);
    do
	echo "You picked command $COMMAND ($REPLY)"
	break
    done
}

[ -z "${OPTION:-}" ] && {
    echo "Option: "
    read OPTION
}

RERUN_MODULE_HOME_DIR=$(rerun_module_exists $MODULE)

COMMAND_LIST=( ${COMMAND//,/ } )
for cmd in ${COMMAND_LIST[*]}
do
    #
    # Verify this command exists
    #
    [ -d $RERUN_MODULE_HOME_DIR/commands/$cmd ] || {
        rerun_log warn "command not found: \""$MODULE:$cmd\""...skipping."
        continue
    }
    #
    # Unassign this command from the option
    #
    # Update the command metadata.
    command_metadata=$RERUN_MODULE_HOME_DIR/commands/$cmd/metadata
    command_options_assignments=$(rerun_options $RERUN_MODULES $MODULE $cmd)
    # Subtract option from the list
    command_options=( $(rerun_list_remove $OPTION $command_options_assignments) )

    stubbs_command_options_write \
        $RERUN_MODULE_HOME_DIR $cmd \
        "${command_options[*]:-}" || rerun_die "Failed generating command metadata"
    rerun_log info "Updated command metadata:  $command_metadata"
    #
    # Check if this option is assigned to any commands.
    option_to_command_assignments=( $(stubbs_option_commands $RERUN_MODULE_HOME_DIR $OPTION) )
    #
    # Remove the option directory, if no commands are assigned to it.
    #
    if [ ${#option_to_command_assignments[*]} = 0 ]
    then
        if [[ -d  "$RERUN_MODULE_HOME_DIR/options/$OPTION" ]]
        then
            rm -rf "$RERUN_MODULE_HOME_DIR/options/$OPTION" || {
                rerun_die "Error removing option: $OPTION"
            }
            rerun_log info "Removed $RERUN_MODULE_HOME_DIR/options/$OPTION"
        fi
    fi
    #
    # Generate option parser script.
    #
    .  $RERUN_MODULE_DIR/lib/stub/bash/metadata || {
        rerun_die "error reading  $RERUN_MODULE_DIR/lib/stub/bash/metadata "
    }
    [ -z "$OPTIONS_GENERATOR" ] && {
        rerun_die "required metadata not found: OPTIONS_GENERATOR"
    }
    [ -z "$OPTIONS_SCRIPT" ] && {
        rerun_die "required metadata not found: OPTIONS_SCRIPT"
    }
    options_parser=$RERUN_MODULE_HOME_DIR/commands/$cmd/$OPTIONS_SCRIPT
    # Generate it
    RERUN_MODULE_PARENT_DIR="$(dirname $RERUN_MODULE_HOME_DIR)"
    $RERUN_MODULE_DIR/lib/stub/bash/$OPTIONS_GENERATOR \
        $RERUN_MODULE_PARENT_DIR $MODULE $cmd > $options_parser || rerun_die "Failed generating options parser."
    rerun_log info "Wrote options script: $RERUN_MODULE_HOME_DIR/commands/$cmd/options.sh"
    #
    # Update option variable summary in command script.
    #
    command_script=$RERUN_MODULE_HOME_DIR/commands/$cmd/script
    if [ -f "$command_script" ]
    then
        stubbs_script_header \
            $RERUN_MODULE_HOME_DIR $cmd > ${command_script}.$$ || {
            rerun_die "Error updating command script header"
        }
        mv $command_script.$$ $command_script || {
            rerun_die "Error updating command script header"
        }
        rerun_log info "Updated command script header: $command_script"
    fi
done 
# Done
exit $?
